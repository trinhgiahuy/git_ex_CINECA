<?xml version="1.0" encoding="UTF-8"?>
<bag xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean" xmlns:exsl="http://exslt.org/common" xmlns:int="http://www.w3.org/2001/XMLSchema#int" xmlns:str="http://exslt.org/strings" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <internal>
  <name>%HPCPerfCharAtypeName</name>
  <shortName>%HPCPerfCharAtypeShortName</shortName>
  <description>%HPCPerfCharAtypeDescription</description>
  <shortDescription>%HPCPerfCharAtypeShortDescription</shortDescription>
  <abbreviation>hpc</abbreviation>
  <alias>hpc-performance</alias>
  <int:schemaVersion>1</int:schemaVersion>
  <int:contentVersion>1</int:contentVersion>
  <iconClass>chip light</iconClass>
  <property name="helpId">configs.analysis_type-hpc</property>
 </internal>
 <prerequisites xsl:version="1.0" exsl:keep_exsl_namespace="">
  <xsl:copy-of select="document('config://analysis_type/include/require_connection.xsl?connections=group_generic')"/>
  <xsl:if test="exsl:ctx('PMU')='knc'">
   <xsl:value-of select="exsl:error('%ThisAnalysisTypeIsNotApplicable')"/>
  </xsl:if>
 </prerequisites>
 <knobs xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:variable name="pmuCommon" select="document('config://include/pmu_common.xsl')"/>
  <xsl:variable name="isPerfBandwidthAvailable" select="$pmuCommon//variables/isPerfBWAvailable"/>
  <xsl:variable name="defaultBandiwtdth">
   <xsl:value-of select="exsl:ctx('isSEPDriverAvailable', 0) or $isPerfBandwidthAvailable='true'"/>
  </xsl:variable>
  <xsl:variable name="knobsParams">
   <params defaultMemoryBandwidth="{$defaultBandiwtdth}" defaultAnalyzeOpenMP="true"/>
  </xsl:variable>
  <xsl:variable name="knobsParamsName">
   <xsl:text>config://analysis_type/include/knobs.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($knobsParams)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="commonKnobs" select="document($knobsParamsName)"/>
  <xsl:copy-of select="$commonKnobs//knobs/doubleKnob[@id='samplingInterval']"/>
  <groupKnob id="groupForCustomControl">
   <xsl:if test="not(exsl:is_experimental('sep-lbr')) and exsl:ctx('targetOS', '') = 'MacOSX'">
    <xsl:attribute name="boolean:visible">false</xsl:attribute>
   </xsl:if>
   <knobProperty name="knob_control_id">collectStacksWithSizeGroup</knobProperty>
   <knobs>
    <booleanKnob id="enableStackCollect" displayName="%EnableStackCollection" cliName="enable-stack-collection">
     <description>%EnableStackCollectionDescription</description>
     <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>
    <xsl:copy-of select="$commonKnobs//knobs/enumKnob[@id='stackSizeCollect']"/>
   </knobs>
  </groupKnob>
  <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectMemoryBW']"/>
  <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='dramBandwidthLimitsAT']"/>
  <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='analyzeOpenMPRegions']"/>
  <booleanKnob id="collectAffinity" displayName="%CollectAffinity" cliName="collect-affinity">
   <xsl:choose>
    <xsl:when test="exsl:ctx('targetOS')='Linux'">
     <xsl:attribute name="boolean:visible">true</xsl:attribute>
    </xsl:when>
    <xsl:otherwise>
     <xsl:attribute name="boolean:visible">false</xsl:attribute>
    </xsl:otherwise>
   </xsl:choose>
   <description>%CollectAffinityDescription</description>
   <boolean:defaultValue>false</boolean:defaultValue>
  </booleanKnob>
  <booleanKnob id="collectParallelFs" displayName="%CollectParallelFs" cliName="parallel-fs-collection">
   <xsl:choose>
    <xsl:when test="exsl:ctx('targetOS')='Linux' and exsl:is_experimental('lustre')">
     <xsl:attribute name="boolean:visible">true</xsl:attribute>
    </xsl:when>
    <xsl:otherwise>
     <xsl:attribute name="boolean:visible">false</xsl:attribute>
    </xsl:otherwise>
   </xsl:choose>
   <description>%CollectParallelFsDescription</description>
   <boolean:defaultValue>false</boolean:defaultValue>
  </booleanKnob>
  <booleanKnob id="collectMpiTracingData" displayName="%CollectMpiTracingData" cliName="mpi-tracing">
   <xsl:choose>
    <xsl:when test="exsl:is_experimental('mpi')">
     <xsl:attribute name="boolean:visible">true</xsl:attribute>
    </xsl:when>
    <xsl:otherwise>
     <xsl:attribute name="boolean:visible">false</xsl:attribute>
    </xsl:otherwise>
   </xsl:choose>
   <description>%CollectMpiTracingDataDescription</description>
   <boolean:defaultValue>false</boolean:defaultValue>
  </booleanKnob>
  <stringKnob id="initialViewpoint" displayName="%InitialViewpoint" boolean:visible="false">
   <defaultValue>%OpenMPHotspotsViewpointName</defaultValue>
  </stringKnob>
  <stringKnob id="allowedViewpoints" boolean:visible="false">
   <defaultValue>%OpenMPHotspotsViewpointName</defaultValue>
  </stringKnob>
  <booleanKnob id="useHPCCPUUtilizationThresholds" boolean:visible="false">
   <boolean:defaultValue>true</boolean:defaultValue>
  </booleanKnob>
 </knobs>
 <analysis xsl:version="1.0" str:keep_str_namespace="" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:copy-of select="document('config://analysis_type/include/prerequisites.xsl')/pmu_prerequisites/*"/>
  <xsl:variable name="events" select="document('config://analysis_type/include/common_events.xsl?processFPU=true')"/>
  <xsl:variable name="MainEvents" select="$events//events/cpi"/>
  <xsl:variable name="MemEvents" select="$events//events/memboundHPC"/>
  <xsl:variable name="FPUEvents" select="$events//events/fpu"/>
  <xsl:variable name="pmuCommon" select="document('config://include/pmu_common.xsl')"/>
  <xsl:variable name="isBandwidthAvailable" select="$pmuCommon//variables/isDRAMBWAvailable"/>
  <xsl:variable name="isInterSocketBandwidthAvailable" select="$pmuCommon//variables/isInterSocketBWAvailable"/>
  <xsl:variable name="memBandwidthEvents" select="$pmuCommon//variables/memBandwidthEvents"/>
  <xsl:variable name="qpiBandwidthEvents" select="$pmuCommon//variables/qpiBandwidthEvents"/>
  <xsl:if test="(exsl:ctx('PMU') = 'haswell' or exsl:ctx('PMU') = 'haswell_server' or exsl:ctx('PMU') = 'crystalwell') and                    (exsl:ctx('isHTEnabled', 0) or (exsl:ctx('logicalCPUCount', 1) &gt; exsl:ctx('physicalCoreCount', 1)))">
   <xsl:value-of select="exsl:warning('%HTisONAT')"/>
  </xsl:if>
  <collector id="runsa">
   <xsl:if test="exsl:ctx('platformType', '0') = '146'">
    <xsl:value-of select="exsl:error('%UnknownPMUForAT')"/>
   </xsl:if>
   <collectorKnob knob="enableStackCollection">
    <xsl:copy-of select="exsl:ctx('enableStackCollect', 0)"/>
   </collectorKnob>
   <xsl:copy-of select="document('config://analysis_type/include/knobs.xsl')//knobs/stackSizeKnobLogic/*"/>
   <boolean:collectorKnob knob="advancedLoopAnalysis">true</boolean:collectorKnob>
   <xsl:if test="exsl:ctx('collectMemoryBW', 0)">
    <boolean:collectorKnob knob="enableDramBandwidthLimitsWarning">true</boolean:collectorKnob>
    <xsl:choose>
     <xsl:when test="$isBandwidthAvailable='true'">
      <collectorKnob knob="collectMemBandwidth">
       <xsl:copy-of select="exsl:ctx('collectMemoryBW', 0)"/>
      </collectorKnob>
     </xsl:when>
     <xsl:otherwise>
      <xsl:value-of select="exsl:error('%BandwidthIsNotWorkWithoutSampling')"/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:if>
   <collectorKnob knob="analyzeFPU">
    <xsl:choose>
     <xsl:when test="not (             exsl:ctx('PMU') = 'ivytown'             or exsl:ctx('PMU') = 'ivybridge'             or exsl:ctx('PMU') = 'broadwell'             or exsl:ctx('PMU') = 'broadwell_de'             or exsl:ctx('PMU') = 'broadwell_server'             or exsl:ctx('PMU') = 'skylake'             or exsl:ctx('PMU') = 'skylake_server'             or exsl:ctx('PMU') = 'cascadelake_server'             or exsl:ctx('PMU') = 'knl'             or exsl:ctx('PMU') = 'icelake'             or exsl:ctx('PMU') = 'icelake_server'             or exsl:ctx('PMU') = 'tigerlake'             or exsl:ctx('PMU') = 'alderlake'             )">false      <xsl:value-of select="exsl:warning('%FPUMetricsIsNotSupportedForThisPlatform')"/>
     </xsl:when>
     <xsl:otherwise>true</xsl:otherwise>
    </xsl:choose>
   </collectorKnob>
   <xsl:variable name="allEvents">
    <xsl:value-of select="$MainEvents"/>
    <xsl:if test="$MemEvents and $MemEvents != ''">
     <xsl:text>,</xsl:text>
     <xsl:value-of select="$MemEvents"/>
    </xsl:if>
    <xsl:if test="$FPUEvents and $FPUEvents != ''">
     <xsl:text>,</xsl:text>
     <xsl:value-of select="$FPUEvents"/>
    </xsl:if>
    <xsl:if test="exsl:ctx('isSEPDriverAvailable', 0) and exsl:ctx('omniPathOnBoard', 'None') != 'None'">
     <xsl:text>,UNC_HFI_RCV_DATA_PACKETS,UNC_HFI_SEND_DATA_PACKETS,UNC_HFI_RCV_DATA_DW,UNC_HFI_SEND_DATA_DW</xsl:text>
    </xsl:if>
    <xsl:if test="$isBandwidthAvailable = 'true' and $memBandwidthEvents != ''">
     <xsl:text>,</xsl:text>
     <xsl:value-of select="$memBandwidthEvents"/>
     <xsl:if test="$isInterSocketBandwidthAvailable = 'true' and $qpiBandwidthEvents != ''">
      <xsl:text>,</xsl:text>
      <xsl:value-of select="$qpiBandwidthEvents"/>
     </xsl:if>
    </xsl:if>
   </xsl:variable>
   <collectorKnob knob="pmuEventConfig">
    <xsl:value-of select="exsl:merge_pmu_events($allEvents)"/>
   </collectorKnob>
   <boolean:collectorKnob knob="cpuGpuUsageData">true</boolean:collectorKnob>
   <boolean:collectorKnob knob="adjustCollectionBoundsByOMPApps">true</boolean:collectorKnob>
   <xsl:if test="exsl:ctx('PMU') != 'knl' and exsl:ctx('collectMemoryBW', 0) and exsl:ctx('dramBandwidthLimitsAT', 0)">
    <collectorKnob knob="dramBandwidthLimits">true</collectorKnob>
   </xsl:if>
   <collectorKnob knob="collectOpenMPRegions">
    <xsl:value-of select="exsl:ctx('analyzeOpenMPRegions', 0)"/>
   </collectorKnob>
   <collectorKnob knob="pmuSamplingInterval">
    <xsl:value-of select="format-number(exsl:ctx('samplingInterval', 1), '#.####')"/>
   </collectorKnob>
   <xsl:if test="exsl:ctx('collectAffinity', 0)">
    <xsl:variable name="minMajorVersion" select="number(3)"/>
    <xsl:variable name="kernelVersion" select="string(exsl:ctx('LinuxRelease', ''))"/>
    <xsl:if test="$kernelVersion">
     <xsl:variable name="currentKernelVersions" select="str:tokenize($kernelVersion, '.-')"/>
     <xsl:if test="number($currentKernelVersions[1]) &lt; $minMajorVersion">
      <xsl:value-of select="exsl:error(string('%AffinityNotSupportedKernelVersion'))"/>
     </xsl:if>
    </xsl:if>
    <boolean:collectorKnob knob="enableThreadAffinity">true</boolean:collectorKnob>
   </xsl:if>
   <xsl:if test="exsl:ctx('collectParallelFs', 0)">
    <boolean:collectorKnob knob="enableParallelFsCollection">true</boolean:collectorKnob>
   </xsl:if>
   <xsl:if test="exsl:ctx('collectMpiTracingData', 0) and exsl:is_experimental('mpi')">
    <boolean:collectorKnob knob="enableMpiTracing">true</boolean:collectorKnob>
   </xsl:if>
   <xsl:if test="exsl:ctx('genArchOnBoard', 0) &gt; 5">
    <boolean:collectorKnob knob="errorsAsWarnings">true</boolean:collectorKnob>
    <collectorKnob knob="gpuSamplingInterval">
     <xsl:value-of select="exsl:ctx('preferedGpuAdapter', 'none')"/>
     <xsl:text>|1</xsl:text>
    </collectorKnob>
    <collectorKnob knob="gpuCounters">
     <xsl:value-of select="exsl:ctx('preferedGpuAdapter', 'none')"/>
     <xsl:text>|global-local-accesses</xsl:text>
    </collectorKnob>
   </xsl:if>
   <boolean:collectorKnob knob="explicitUncoreEventsConfig">true</boolean:collectorKnob>
   <boolean:collectorKnob knob="collectUserTasksEventsCountersMode">true</boolean:collectorKnob>
  </collector>
 </analysis>
</bag>
